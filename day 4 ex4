import itertools
import math

def distance(city1, city2):
    """Calculate the Euclidean distance between two cities."""
    return math.sqrt((city2[0] - city1[0]) ** 2 + (city2[1] - city1[1]) ** 2)

def tsp(cities):
    """Solve the Traveling Salesman Problem using exhaustive search."""
    n = len(cities)
    if n <= 1:
        return 0, cities  # No travel needed if there's 1 or no city
    
    # The first city in the list is considered the starting point
    start_city = cities[0]
    shortest_distance = float('inf')
    best_path = []
    
    # Generate all permutations of the cities excluding the starting city
    for perm in itertools.permutations(cities[1:]):
        # Create the full route starting and ending with the start_city
        route = [start_city] + list(perm) + [start_city]
        
        # Calculate the total distance of the route
        total_distance = 0
        for i in range(len(route) - 1):
            total_distance += distance(route[i], route[i + 1])
        
        # Update the shortest distance and best path if a shorter route is found
        if total_distance < shortest_distance:
            shortest_distance = total_distance
            best_path = route
    
    return shortest_distance, best_path

# Test case
cities = [(0, 0), (1, 2), (3, 1), (6, 3)]
min_distance, best_path = tsp(cities)
print("Minimum distance:", min_distance)
print("Best path:", best_path)

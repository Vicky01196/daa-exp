def strStr(haystack, needle):
    # Helper function to compute LPS array
    def compute_lps(pattern):
        lps = [0] * len(pattern)
        length = 0
        i = 1
        
        while i < len(pattern):
            if pattern[i] == pattern[length]:
                length += 1
                lps[i] = length
                i += 1
            else:
                if length != 0:
                    length = lps[length - 1]
                else:
                    lps[i] = 0
                    i += 1
        return lps

    # Edge cases
    if not needle:
        return 0
    if not haystack or len(needle) > len(haystack):
        return -1

    lps = compute_lps(needle)
    i = 0  # index for haystack
    j = 0  # index for needle

    while i < len(haystack):
        if needle[j] == haystack[i]:
            i += 1
            j += 1

        if j == len(needle):
            return i - j
        
        elif i < len(haystack) and needle[j] != haystack[i]:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1

    return -1

# Test cases
print(strStr("sadbutsad", "sad"))  # Output: 0
print(strStr("leetcode", "leeto")) # Output: -1

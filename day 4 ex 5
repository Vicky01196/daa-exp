import itertools

def total_cost(assignment, cost_matrix):
    """Calculate the total cost of a given assignment based on the cost matrix."""
    total = 0
    n = len(assignment)
    for i in range(n):
        total += cost_matrix[i][assignment[i]]
    return total

def assignment_problem(cost_matrix):
    """Solve the assignment problem using exhaustive search."""
    n = len(cost_matrix)
    if n == 0:
        return 0, []  # No assignment needed if cost matrix is empty
    
    # Generate all possible permutations of worker indices
    permutations = itertools.permutations(range(n))
    
    min_cost = float('inf')
    best_assignment = None
    
    for perm in permutations:
        current_cost = total_cost(perm, cost_matrix)
        if current_cost < min_cost:
            min_cost = current_cost
            best_assignment = perm
    
    return min_cost, best_assignment

# Test case
cost_matrix = [
    [10, 2, 8],
    [4, 7, 6],
    [9, 5, 3]
]

min_cost, best_assignment = assignment_problem(cost_matrix)
print("Minimum cost:", min_cost)
print("Best assignment:", best_assignment)

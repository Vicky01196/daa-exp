def findPeakElement(nums):
    def binary_search(left, right):
        if left == right:
            return left
        
        mid = (left + right) // 2
        
        # Check if mid is a peak
        if (mid == 0 or nums[mid] > nums[mid - 1]) and (mid == len(nums) - 1 or nums[mid] > nums[mid + 1]):
            return mid
        # If the left neighbor is greater, the peak must be in the left half
        elif mid > 0 and nums[mid] < nums[mid - 1]:
            return binary_search(left, mid - 1)
        # Otherwise, the peak must be in the right half
        else:
            return binary_search(mid + 1, right)
    
    return binary_search(0, len(nums) - 1)

# Test cases
print(findPeakElement([1, 2, 3, 1]))           # Output: 2 (or any index where the peak is found, i.e., 2)
print(findPeakElement([1, 2, 1, 3, 5, 6, 4]))  # Output: 1 or 5 (index of peaks 2 or 6)
